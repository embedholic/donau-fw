var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory')
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Boot = xdc.useModule('ti.catalog.c2800.init.Boot');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Idle = xdc.useModule('ti.sysbios.knl.Idle');
var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Queue = xdc.useModule('ti.sysbios.knl.Queue');

/* 
 * Program.argSize sets the size of the .args section. 
 * The examples don't use command line args so argSize is set to 0.
 */
Program.argSize = 0x0;

/*
 * Uncomment this line to globally disable Asserts.
 * All modules inherit the default from the 'Defaults' module.  You
 * can override these defaults on a per-module basis using Module.common$. 
 * Disabling Asserts will save code space and improve runtime performance.
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;
 */

/*
 * Uncomment this line to keep module names from being loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
 */
Defaults.common$.namedModule = false;

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 4;       

/* 
 * Uncomment this line to disable the Error print function.  
 * We lose error information when this is disabled since the errors are
 * not printed.  Disabling the raiseHook will save some code space if
 * your app is not using System_printf() since the Error_print() function
 * calls System_printf().
Error.raiseHook = null;
 */

/* 
 * Uncomment this line to keep Error, Assert, and Log strings from being
 * loaded on the target.  These strings are placed in the .const section.
 * Setting this parameter to false will save space in the .const section.
 * Error, Assert and Log message will print raw ids and args instead of
 * a formatted message.
 */
Text.isLoaded = false;

/*
 * Uncomment this line to disable the output of characters by SysMin
 * when the program exits.  SysMin writes characters to a circular buffer.
 * This buffer can be viewed using the SysMin Output view in ROV.
 */
SysMin.flushAtExit = false;

/* System stack size (used by ISRs and Swis) */
Program.stack = 1024;

/* Circular buffer size for System_printf() */
SysMin.bufSize = 128;

/* 
 * Create and install logger for the whole system
 */
var loggerBufParams = new LoggerBuf.Params();
loggerBufParams.numEntries = 4;
loggerBufParams.exitFlush = true;
var logger0 = LoggerBuf.create(loggerBufParams);
Defaults.common$.logger = logger0;
Main.common$.diags_INFO = Diags.ALWAYS_ON;

System.SupportProxy = SysMin;

/*
 * Create a task.  The 'taskFxn' function can be found in main.c.
 */
var task0Params = new Task.Params();
task0Params.priority = 6;
task0Params.instance.name = "TxTask";
Program.global.TxTask = Task.create("&_task_RxTx", task0Params);

Boot.pllOSCCLK = 20;
Boot.pllcrDIV = 29;
var task1Params = new Task.Params();
task1Params.instance.name = "MsgCore";
task1Params.stackSize = 2048;
task1Params.priority = 6;
Program.global.MsgCore = Task.create("&_task_MsgCore", task1Params);
Clock.tickPeriod = 100;
var clock0Params = new Clock.Params();
clock0Params.instance.name = "prd2d5m";
clock0Params.period = 25;
clock0Params.startFlag = true;
Program.global.prd2d5m = Clock.create("&_prd_System_2d5ms", 100, clock0Params);
var clock1Params = new Clock.Params();
clock1Params.instance.name = "prdMVP20ms";
clock1Params.period = 200;
clock1Params.startFlag = true;
Program.global.prdMVP20ms = Clock.create("&_prd_MVP_20ms", 100, clock1Params);
Clock.swiPriority = 1;
BIOS.clockEnabled = true;
BIOS.swiEnabled = true;
//-var queue0Params = new Queue.Params();
//-queue0Params.instance.name = "QUEUE_I2C";
//-Program.global.QUEUE_I2C = Queue.create(queue0Params);
Boot.bootFromFlash = true;
BIOS.libType = BIOS.LibType_NonInstrumented;
BIOS.assertsEnabled = false;
BIOS.logsEnabled = false;
BIOS.runtimeCreatesEnabled = false;
LoggerBuf.enableFlush = true;
BIOS.rtsGateType = BIOS.GateMutexPri;
Task.idleTaskStackSize = 1024;
Task.defaultStackSize = 512;
BIOS.heapSize = 0;
Idle.idleFxns[0] = "&_idleLoop";
var task2Params = new Task.Params();
task2Params.instance.name = "test_CAN";
task2Params.priority = 6;
Program.global.test_CAN = Task.create("&_task_CAN", task2Params);
Defaults.common$.diags_ASSERT = Diags.RUNTIME_OFF;
BIOS.cpuFreq.lo = 300000000;
Boot.pllstsDIVSEL = 2;
